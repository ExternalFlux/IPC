<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAD+/v7//f////L09f+enJv/ZGJh/1NRUP9KSEf/SkhI/0tJSP9NS0r/TkxL/0tJSP9MSkn/TUtK/09N
        TP9RT07/UU9O/1BOTf9PTUz/SUdG/0tJSP9MSkn/TUtK/0xKSf9KS0n/TEpJ/05MS/9TUVD/XF1b/4qL
        if/k5eP//////////v/19fX/c3Fw/z88OP85NTT/MjAv/zk2Mv88ODf/Pzs6/0E9PP9DPz7/Pjw7/z48
        O/9BPz7/REJB/0VDQv9GREP/REJB/0E/Pv87OTj/PTs6/z89PP9BPz7/QD49/z48O/9BPTz/QT08/zs3
        Nv80MjH/PDo5/1pYV//g3t7//////5KQj/9CPzv/NzQw/1JOTf+OjIv/hYJ+/3Fsaf9sZ2b/Z2Jh/2Rf
        Xv9fW1r/XlpZ/11ZWP9bWVj/XFpZ/1tZWP9bWVj/W1lY/1pYV/9aWFf/XFhX/11ZWP9dWVj/YF1Z/2pl
        Yv94c3D/iISD/2JgX/84NDP/Pjo5/29rav/o6ur/T0tK/z86N/9iX1v/3tzc/9/d3f+fnZz/bGdk/1RN
        Sv9KQ0D/Pzo3/zk0Mf81MC3/MC0p/y8sKP8wLCv/MCwr/zAsK/8wLSn/MC0p/y8sKP8vLCj/MC0p/zMw
        LP9DPjv/V1JP/3dyb/+0sK//6ujn/4N/fv87ODT/S0hE/7y+v/9MR0T/TkhD/4+MiP/Z19f///7+/7Cv
        q/9FQTz/MSsm/y8pJP8tJyL/KSUg/ycjHv8nIx7/JiId/yYiHf8mIh3/JiId/yUhHP8mIh3/JiId/yYi
        Hf8mIh3/KCQf/ywoI/8zLyr/eHNw//fz8v/o5uX/m5eW/1VQTf9PSkf/srKy/1lQTP9mXlf/VFFN/4B8
        e/+opaH/JyQf/xkTDP8dGRT/HhoV/yAaFf8gGhX/IRsW/yIcF/8iHBf/Ix0Y/yMdFv8kHhf/IhwV/yIc
        Ff8hGxT/HxwU/x8cFP8fGxb/HRkU/x0XEv8XEw7/f3t6/5SQj/9STUz/b2lk/1tVUP+2tLT/ZFxV/25l
        Yf86NjX/QTw5/yIeGf8WEw7/IhwV/yAcF/8hGxb/IhwV/yMdFv8kHhf/JiAZ/yYgGf8nIRr/JyEa/ygi
        G/8nIRr/JiAZ/yUfGP8jHRb/IhwV/yEbFP8gHBf/IRsU/xwYE/8VEA3/QTw7/z04Nf9xa2b/aGJd/7e1
        tf90aWX/eG9r/zczMv8uKSb/GBQP/xoXEv8gHBf/IRsW/yIcF/8kHhn/JiAZ/ygiG/8pIxz/KiQd/ysl
        Hv8sJh//LCYf/yslHv8qJB3/KSMc/yUfGP8kHhn/IhwX/yAcF/8gHRX/HhoV/xQRDf8rJyb/NC8s/3dx
        bP90bmf/uLa2/3pya/9/dHD/ODQz/ygmJf8ZFRD/HBgT/ygkH/80Lin/MzAo/zArKP8xLCn/Miwl/y4p
        IP8xKiH/NS4l/zUyKv82Lif/Ny4q/zQuJ/8xLSj/LSol/ygiG/8nIh//LSkk/y0oJf8uKCP/HhkW/yYi
        If8uKyf/enRv/39zcf+3t7f/fnZv/4B3c/83MzL/KCYl/xcTDv8oJB//SENA/0pGRf9NR0L/RUE8/0VC
        Pv9FQj3/NC4n/zUvKP89ODX/RUA//z44M/9DPjv/RD88/0ZAO/9DPjv/MCol/zw3NP8/PDj/Qj06/z87
        Nv8sKCP/JCAf/y0qJv97eHD/gXh0/7e3t/+AenX/gXt2/zg0M/8oJiX/FxQQ/1RPTP9kYF//PTo2/y0n
        Iv82Lif/SEI7/2BcV/9RTUj/S0dC/1lUUf9ZVlL/Pzky/1pXU/9TUEz/OzYt/zcyKf9GQDv/V1JP/0M+
        O/8nIh//JCAb/x4ZFv8kIB//MC0p/315dP+FfHj/uLi4/4J8d/+Ff3r/ODQz/yomJf8YFRH/eXV0/3Jw
        b/8mIxv/LSci/zAoIf8/OTL/eXV0/3d1df93dHD/eHVx/2diX/9COzL/cm5t/2ZiYf84Mif/NjEo/1tW
        U/9zbmv/NjAr/ychGv8hGxT/FhIN/yolJP80Lyz/gnt4/4h/fP+5t7f/iIJ9/4mDfv8+OTb/Lisn/xgV
        Ef+Qjo7/kI6O/ywnHv8yKSD/OC8l/zc1K/90c2//ko+L/2RfXP+VkZD/b2Zi/0xGO/+Mi4f/fXt6/zw2
        K/86Myr/b2pn/4uJiP9APDf/JSIa/yAdFf8WEg3/LSkk/zw2Mf+Ff3r/iYN+/7u5uf+LhIH/j4aC/0VB
        PP81MSz/GBUR/399fP+zsbD/eXZy/zQwK/9EPDX/PDUs/19ZUv+yr6v/oqCf/62trf9nXlT/Tkg7/5+i
        oP+cnZv/RD4x/z83Kv9hXVj/pKel/4yIh/8yLyv/KSYi/yEeGv8wLCf/Qjw1/4qEf/+Lh4L/ube3/4+I
        hf+SjIf/T0lE/0E7NP8ZFRD/My8u/7+8uP/Fx8f/wsbH/7a0s/8/NzD/RD00/62rqv/Dxcb/s7Oz/1ZN
        QP9STEH/wL6+/7u5uf9IQjf/Qzow/zwzL/+Zl5b/wL6+/7+9vP++vLz/e3Z3/zYzK/9JQzz/joiD/5CL
        iP+5ubn/k46L/5aQif9UTkf/SkM6/xwWEf8fGhf/NjEu/4eDgv+WlZH/g4B7/0A4Mf9HPzL/Z2FW/4R+
        d/9za2T/VUxC/1VOP/9/enH/fHZv/0ZBOP9AOTD/PjUs/zYyJ/9ycW3/jo+L/4qIh/9OS0f/OzYt/1BK
        P/+SjIf/lZCP/7m6uP+Xko//mpOQ/1lTSP9MRjv/GhUS/x4bE/8oIhv/LScg/zQtJP87NCv/OzUu/zs3
        Mv88ODP/Qzs0/1NJP/9BOzb/Pzky/0U+Nf9LRTr/SkE3/0E7MP88NSz/NzAn/y4oIf8qJB3/IR0Y/xYS
        Df87NS7/UEhB/5WPiP+ZlJH/urq6/5yXlP+fmJX/VVBH/0dCOf8aFRL/HhsT/ygiG/8sJh//NC0k/zky
        Kf9DPTb/Qz47/0Q/PP9GQDn/UEc9/0VAPf9EQDv/RkA5/0pDOv9EPjP/QDkw/zs0K/81LSb/LScg/ykj
        HP8iHhn/FxMO/zYwKf9HQTr/l5GM/56Zlv+6urr/oZyb/6KdnP9QS0L/Qjw1/xoVEv8eGhX/JyEc/ysl
        Hv8yKiP/ODEo/0xGQf9TUEz/VFFN/1BKRf9PRj3/VFBP/1VRUP9TUEz/UU1I/1JMRf9OSEH/Pjgx/zEr
        JP8tJyD/KSMc/yEdGP8VEg3/Lysm/0A6M/+Zk47/o56d/7q6uv+moaD/pqGg/0pEPf86NC3/GBUR/x0Z
        FP8mIBn/KyUe/zApIP81LiX/VFBL/2ZjX/9mYmH/W1dS/0U+Nf9nZGD/ZmRj/2dlZP9pZmL/aWZi/2pm
        Zf9kYV3/OzUu/yokHf8oIhv/IBwX/xYTDv8qJyL/NTEs/5mUkf+no6L/urq6/6qlpP+ppqL/Qj45/zIs
        J/8XFBD/HBgT/yQeF/8oIhv/LCce/zAqI/9cWFP/eHZ1/3p4d/9nY17/RDw1/316dv97eXj/c3Bs/1hU
        T/9sZ2T/fXt6/358e/9jXlv/KCIb/yYgGf8fGxb/FhMP/yYjH/8uKSb/m5aT/6unpv+7u7v/r6uq/62q
        pv88OTX/LCck/xcUEP8cGBP/IR4W/ychGv8qJB3/LScg/1pWUf+IhoX/j42M/3dyb/9DPTb/kY+O/5CO
        jf93c27/QDkw/zoyK/+Mion/kJCQ/317ev8oIh3/JB4X/x4aFf8VEg7/JSIe/yonI/+cmJf/r6uq/7u7
        u/+0sK//r66q/zg0M/8qJST/FhMP/xoWEf8eGhX/Ih8X/yYgGf8qJB3/eXZy/6Siof+ioqL/g4B8/z85
        Mv+jo6P/pKSk/4B9ef81LiX/PTcw/6Kgn/+mpqb/ioiH/yMfGv8fGxb/HRkU/xQRDf8kIB//KiYl/5+b
        mv+1sbD/u7u7/7i0s/+0srH/NzMy/ykjJP8SDwv/FxIP/xwYE/8eGhX/IB0V/yIeGf+AfXn/tLS0/7W1
        tf+PjIj/OzUu/7a2tv+0trf/qKio/4J/e/+npqL/tbe4/7e5uv97eHT/HxsW/xwYE/8ZFRD/EQ4K/yYi
        If8sKCf/oJyb/7i0s/+7u7v/uLi4/7e1tP84MzL/LSgl/w4LB/8RDgr/FRIO/xcUEP8YFRH/GRYS/4yK
        if/FxcX/xcXF/7a0s/83NDD/xsXH/8bGxv/Gxsb/yMjI/8fHx//Jycn/oZ+e/yUiHv8XFBD/FBMP/xEQ
        DP8LBwb/KCMi/zArKv+koJ//t7e3/7y8vP++vr7/vLq5/zYyMf84NDP/EhAP/wQCAf8MCgn/DQsK/xAN
        Cf8RDgr/WlhX/4aGhv+Ghob/dnRz/yMhIP+Hh4f/hoeF/4eIhv+Gh4X/hoaG/2VlZf8aGBf/Dg0J/w4M
        C/8NCwr/CQcG/wYEA/88ODf/Lysq/6ako//Avr3/vb29/8XFxf/Jx8b/R0NC/0pIR/9gXl7/DAwM/wIA
        AP8FAwL/BQMC/wYEA/8HBQT/BAQE/wQEBP8IBgb/BgQD/wUFBf8FBgT/BAUD/wQFA/8GBgb/BAQE/wYE
        A/8GBQH/BQMC/wAAAP8AAAD/UVFR/3NxcP88ODf/trSz/8XDwv/Ly8v/zMzM/9bW1v+PjY3/XVtb/5WV
        lf9sbGz/Hx0d/w0LC/8MCgn/CggH/woIB/8JCQn/BwcH/woICP8LCQj/CggI/wkHB/8KCAf/CwkJ/woI
        CP8KCAj/CwkJ/wwKCf8ODAv/FhQU/0dHR/+SkpL/f319/317e//Pzc3/ycnJ//X09v+6urr/29vb/9fV
        1f+cmpr/bW1t/0pIR/8lIyL/ExER/w0LCv8LCQj/CwkI/wsJCP8LCQj/CwkI/wsJCP8LCQn/CwkJ/wsJ
        Cf8KCAj/DQsL/woICP8NCwv/EA4O/xkVFP8iIB//Ozk4/1hWVv+Jh4f/0c/P/9bW1v/MzMz///7//729
        vf/h4eH/4N7e/93b2/+xsrD/dXNy/2NhYP9gXl3/XVta/11bWv9dW1r/XVta/15cW/9eXFv/Xlxb/15c
        W/9eXFv/XVta/1xaWf9cWln/XVta/11bWv9fXV3/Y19e/2ZiYf9ubGv/n52d/9PT0//d3d3/4+Pj/7Kx
        s////////////7W1tf/d3d3/6Ojo/+Tk5P/j4+P/5OLh/+fl5P/m5ub/5ubm/+Xl5f/n5eX/6efn/+jo
        6P/q6ur/6uvp/+jo6P/m5ub/4+Pj/+Tl4//m5+X/5ubm/+nn5//m5OP/6Obl/+bm5v/n5+f/5ubm/+Xl
        5f+zs7P/9fX1/////////////////8/Pz/+3t7f/xcfH/8XHx//FxcX/x8fH/8nJyf/IyMj/xsbG/8fH
        x//IyMj/yMjI/8fJyf/Jycn/ycnJ/8fGyP/Hx8f/x8fH/8jIyP/Jycn/x8fH/8TGxv/Hx8f/yMjI/8jI
        yP+4uLj/w8PD//7+/v//////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>